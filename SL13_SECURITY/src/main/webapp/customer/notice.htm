[notice.htm]
Ctrl + F11
https://yaga.tistory.com/587/AWS 회원가입.

1. SECURITY(보안) = D인증(Authentication) + 권한(인가)(Authorization)
					익명(guest)fhrmdls		관리자, 일반회원

2. 인증, 권한 처리 = 쿠키, [세션]

3. 서블릿 필터, 스프링 인터셉터(intercepter) = 인증처리
   차이점 = 스프링 빈
   
4.스프링 시큐리티(보안=인증, 권한)
	1)pom.xml(아래 4개를 추가해야한다. )
		 <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-web</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-config</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-core</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-taglibs</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

5. 체크 제약조건
	member	point<3 제거..
	
		select *
from user_constraints
where table_name='member';

alter table member
drop constraint ck_notices_point;



6.
	WEB-INF -> spring -> security-context.xml
	시큐리티에 필요없더라도 기본적인 코딩 안해 놓으면 오류난다. )
	
			<security:http> 
	   			<security:form-login/>  
			</security:http>	
	
	<security:authentication-manager> 
	</security:authentication-manager>
	
	위에 2개는 항상 있어야한다.
	
	
	
7. web.xml

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		/WEB-INF/spring/root-context.xml
 		/WEB-INF/spring/security-context.xml 
		</param-value>
	</context-param>
	
8.web.xml
	  <filter>
      <filter-name>springSecurityFilterChain</filter-name>
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
   </filter>
   <filter-mapping>
      <filter-name>springSecurityFilterChain</filter-name>
      <url-pattern>/*</url-pattern>
   </filter-mapping>
   
   
   
9. 시큐리티가 필요한 url 설계 
	ㄱ. 게시판 글 쓰기 -> 인증(로그인) O
		작성자 == 로그인한 계정(ID).  
	ㄴ. 게시판 수정/삭제 -> 작성자인지 확인, 관리자 권한을 가지고 있는 경우 삭제는 가능.
	ㄷ. 그 외의 요청들은 인증받지 않아도 모든 사용자가 사용 가능
	
	
	
	
10. (암기)	시큐리티 내부 구조(개요)

(1)	AuthenticationManager(인증관리자) - 가장 중요한 역할. 
									인증을 담당하는 존재
									인테페이스
									인증을 다양한 방식으로 인증 처리를 할 수 있도록 설계됨.
(2) ProviderManager(제공관리자) - 인증 처리를  AuthenticationProvider 객체를 이용해서 인증처리를 위임하는 열할. 인터페이스
(3) AuthenticationProvider(인증제공자) - 실제 인증 처리를 하는  역할(실무자)
(4) UserDetailsService(사용자 상세 서비스) - 인증된 실제 사용자의 정보 + 권한을 처리해서 반환하는 객체. 인터페이스 


	(3) + (4) 직접 구현할 수 있다.


11. 시큐리티 설계 -> 접근 제한 설정 코딩.
	security-context.xml

12. 메모리 인증 방식으로 인증 처리.  (테스트)

		<security:authentication-manager> 
	<!-- 인증제공자 : 실무자. -->
		<security:authentication-provider>
			<security:user-service>
				<security:user name="hong" authorities="ROLE_USER" password="1234"/>
      		    <security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password="1234"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	
	
13. header.jsp

	로그인 버튼
	<li><a href="${pageContext.request.contextPath}/login">로그인</a></li>
	
	http://localhost/login

	// PasswordEncoder라는 객체를 설정해줘야함
	오류
	java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id "null"
	스프링 시큐리티 5버전 부터는 반드시 PasswordEncoder 라는 존재를 
	이용해서 인증처리 하도록 되었다.
	비밀번호 인코딩 지정해야된다.
	임시방편으로 PasswordEncoder객체를 사용하지 않으려면
	비밀번호앞에 {noop}를 붙히면된다
	


14. 우리가 지금처럼 로그인하다가 403이라고하는 접근금지 에러가
	발생했을때 처리하는방법
	
	1) 우리가만든 특정 URL로 이동하도록처리
	<security:access-denied-handler error-page="/common/accessError.htm"/>
	CommonController추가
	
	2) AccessDeniedHandler 직접 구현해서 접근 제한 처리(권장)
	<security:access-denied-handler ref=""/>
	org.doit.ik.security.CustomAccessDeniedHandler.java 생성
	코딩후


	ref 처리해주기

15. 커스텀 로그인 페이지


	<security:form-login 
	   	  login-page="/joinus/login.htm"
	   />
	   추가하기

이 요청은 반드시 GET 방식 요청이어야 한다.


구글독 확인






	
	
	
      